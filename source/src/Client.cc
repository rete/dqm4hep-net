/// \file Client.cc
/*
 *
 * Client.cc source template automatically generated by a class generator
 * Creation date : dim. dï¿½c. 4 2016
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/Client.h"
#include "dqm4hep/RequestHandler.h"

namespace dqm4hep {

  namespace net {

    Client::Client() {
      DimClient::setNoDataCopy();
    }

    //-------------------------------------------------------------------------------------------------

    Client::~Client() {
      for (auto iter = m_serviceHandlerMap.begin(), endIter = m_serviceHandlerMap.end(); endIter != iter; ++iter)
        delete iter->second;

      m_serviceHandlerMap.clear();
    }

    //-------------------------------------------------------------------------------------------------

    void Client::queryServerInfo(const std::string &serverName, core::json &serverInfo) const {
      Buffer request;
      this->sendRequest("/" + serverName + "/info", request,
                        [&serverInfo](const Buffer &buffer) {
        if(0 != buffer.size())
          serverInfo = core::json::parse(buffer.begin(), buffer.end());
      });
    }

    //-------------------------------------------------------------------------------------------------

    bool Client::hasSubscribed(const std::string &name) const {
      return (m_serviceHandlerMap.end() != m_serviceHandlerMap.find(name));
    }

    //-------------------------------------------------------------------------------------------------

    unsigned int Client::numberOfSubscriptions(const std::string &serviceName) const {
      return m_serviceHandlerMap.count(serviceName);
    }

    //-------------------------------------------------------------------------------------------------

    void Client::notifyServerOnExit(const std::string &serverName) {
      DimClient::setExitHandler(serverName.c_str());
    }
  }
}
